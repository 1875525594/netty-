syntax = "proto3";

option java_multiple_files = false;

option java_package = "com.example.demo.message";

option java_outer_classname = "GDM";

package example;

enum MSG {
    Test_Request=0;
    Test_Response=1;
    Login_Request = 2;
    Login_Response = 3;
    Logout_Request = 4;
    Logout_Response = 5;
    Keepalive_Request = 6;
    Keepalive_Response = 7;
    Get_Friends_Request = 8;
    Get_Friends_Response = 9;
    Send_Message_Request = 10;
    Send_Message_Response = 11;
    Friend_Notification = 12;
    Message_Notification = 13;
    Welcome_Notification = 14;
}



/*下面定义具体的消息内容，MSG枚举中的每个消息ID，如果有消息体，则会对应一个message 定义，如果无消息体则不必要*/
/*Login_Request 消息ID对应的消息名称为LoginRequest ； 规则为取掉下划线，有利于某些自动化编码工具编写自动化代码*/
message LoginRequest
{
    string username = 1;
    string password = 2;
}

message LoginResponse
{
    fixed32 ttl = 1;
}

message TestRequest {
    string data = 1;
}

message TestResponse {
    string result = 1;
}

/*没有对应的MSG id，则为其它 消息的字段，作为子消息，可以消息嵌套定义，也可以放在外面，个人习惯放在外部。*/
message Friend
{
    bytes name = 1;
    bool online = 2;
}

message GetFriendsResponse
{
    Friend friends = 1;
}

message SendMessageRequest
{
    bytes receiver = 1;
    bytes text = 2;
}

message FriendNotification
{
    bytes name = 1;
    bool online = 2;
}

message MessageNotification
{
    bytes sender = 1;
    bytes text = 2;
    string timestamp = 3;
}

message WelcomeNotification
{
    bytes text = 1;
}

/*请求消息集合，把所有的 XxxxxRequest消息全部集合在一起，使用起来类似于C语言的联合体，全部使用optional字段，任何时刻根据MSG 的id值，最多只有一个有效性， 从程序的逻辑上去保证，编译器（不管是protoc还是具体语言的编译器都无法保证）*/
message Request
{
    oneof request_oneof {
        LoginRequest login = 1;
        TestRequest test_request = 2;
        SendMessageRequest send_message = 3;
    }

}

/*与Request作用相同，把所有的XxxResponse消息集合在一起，当作联合体使用，不过额外多了几个字段用于表示应答的结果*/
message Response
{
    bool result = 1;  //true表示应答成功，false表示应答失败
    bool last_response = 2;// 一个请求可以包含多个应答，用于指示是否为最后一个应答
    bytes error_describe = 3;// result == false时，用于描述错误信息
    LoginResponse login = 4;
    TestResponse test_response = 5;
    GetFriendsResponse get_friends = 6;
}

/*与Request相同,把所有的XxxxxNotification消息集合在一起当作联合体使用.*/
message Notification
{
    FriendNotification friend = 1;
    MessageNotification msg = 2;
    WelcomeNotification welcome = 3;
}

/*顶层消息，包含所有的Request，Response，Notification，
具体包含哪个消息又 MSG msg_type字段决定，程序逻辑去保证msg_type和具体的消息进行匹配*/
message Message
{
    MSG msg_type = 1;//根据消息序号确定特定消息
    fixed32 sequence = 2;//消息系列号，主要用于Request和Response，Response的值必须和Request相同，使得发送端可以进行事务匹配处理
    fixed32 session_id = 3;
    Request request = 4;
    Response response = 5;
    Notification notification = 6;
}

service XxxService {
    rpc getXXX (TestRequest) returns (TestResponse) {}
}

